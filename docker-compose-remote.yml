services:
  api1:
    depends_on:
      traefik:
        condition: service_started
      minio:
        condition: service_healthy
      denokv:
        condition: service_started
      redis:
        condition: service_healthy
    image: denoland/deno:alpine-2.1.4
    command: deno run --unsafely-ignore-certificate-errors --watch --allow-all --unstable-broadcast-channel --unstable-kv --unstable-cron app/api/src/server.ts
    working_dir: /app
    healthcheck:
      test: sh -c 'PORT=8081 deno run --allow-net --allow-env app/api/src/util/healthcheck.ts'
      interval: 5s
      timeout: 5s
      retries: 10
    expose:
      - "8081"
    environment:
      - NPM_CONFIG_REGISTRY=${NPM_CONFIG_REGISTRY:-}
      - PORT=8081
      - DENO_DIR=/deno
      - DENO_INSTALL_ROOT=/deno
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-minioaccesskey123123}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-minioaccesskey123123}
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - AWS_ENDPOINT=${AWS_ENDPOINT-http://minio:9000}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-localbucket}
      - DENO_KV_ACCESS_TOKEN=localdenoaccesstoken
      - DENO_KV_URL=http://denokv:4512
      - REDIS_URL=redis://redis:6379
    volumes:
      - deno:/deno
      - node_modules:/app/node_modules
      - ./deno.json:/app/deno.json
      - ./app/shared:/app/app/shared
      - ./.empty:/app/app/cli
      - ./.empty:/app/app/test
      - ./.empty:/app/app/worker
      - ./app/browser/dist:/app/app/browser/dist
      - ./app/api:/app/app/api
    networks:
      - default
    extra_hosts:
      - host.docker.internal:host-gateway
      - minio.worker-metaframe.localhost:host-gateway
      - worker-metaframe.localhost:host-gateway
    labels:
      - "traefik.enable=true"
      - "custom.label=worker-metaframe.localhost"
      - "traefik.http.routers.api1.rule=Host(`worker-metaframe.localhost`)"
      - "traefik.http.routers.api1.tls=true"
      - "traefik.http.routers.api1.entrypoints=websecure"
    logging:
      driver: ${LOGGING_API:-json-file}

  api2:
    depends_on:
      api1:
        condition: service_healthy
    image: denoland/deno:alpine-2.1.4
    command: deno run --unsafely-ignore-certificate-errors --watch --allow-all --unstable-broadcast-channel --unstable-kv --unstable-cron app/api/src/server.ts
    working_dir: /app
    healthcheck:
      test: sh -c 'PORT=8082 deno run --allow-net --allow-env app/api/src/util/healthcheck.ts'
      interval: 5s
      timeout: 5s
      retries: 10
    expose:
      - "8082"
    environment:
      - NPM_CONFIG_REGISTRY=${NPM_CONFIG_REGISTRY:-}
      - PORT=8082
      - DENO_DIR=/deno
      - DENO_INSTALL_ROOT=/deno
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-minioaccesskey123123}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-minioaccesskey123123}
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - AWS_ENDPOINT=${AWS_ENDPOINT-http://minio:9000}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-localbucket}
      - DENO_KV_ACCESS_TOKEN=localdenoaccesstoken
      - DENO_KV_URL=http://denokv:4512
      - REDIS_URL=redis://redis:6379
    volumes:
      - deno:/deno
      - node_modules:/app/node_modules
      - ./deno.json:/app/deno.json
      - ./app/shared:/app/app/shared
      - ./.empty:/app/app/cli
      - ./.empty:/app/app/test
      - ./.empty:/app/app/worker
      - ./app/browser/dist:/app/app/browser/dist
      - ./app/api:/app/app/api
    networks:
      - default
    extra_hosts:
      - host.docker.internal:host-gateway
      - minio.worker-metaframe.localhost:host-gateway
      - worker-metaframe.localhost:host-gateway
    labels:
      - "traefik.enable=true"
      - "custom.label=worker-metaframe.localhost"
      - "traefik.http.routers.api2.rule=Host(`worker-metaframe-api2.dev`)"
      - "traefik.http.routers.api2.tls=true"
      - "traefik.http.routers.api2.entrypoints=websecure"
    logging:
      driver: ${LOGGING_API:-json-file}

  worker:
    depends_on:
      api2:
        condition: service_healthy
    entrypoint: [
      "deno",
      "run",
      "--unsafely-ignore-certificate-errors",
      "--watch",
      "--allow-all",
      "--unstable-kv",
      "--unstable-broadcast-channel",
      "--unstable-cron",
      "src/cli.ts",
    ]
    # Notice that the worker connects to api2 while the browser connects to api1
    # This helps check api worker communication
    command: run --cpus=2 --gpus=0 --api-server-address=http://api1:8081 local1
    build:
      context: .
      dockerfile: app/worker/Dockerfile
      target: worker
    environment:
      # Workaround for correct URLs in the browser to avoid CORS issues
      - DEV_ONLY_EXTERNAL_SERVER_ADDRESS=https://worker-metaframe.localhost:${APP_PORT:-443}
      # APP_PORT is only needed for the upload/curl/dns/docker fiasco
      - APP_PORT=${APP_PORT:-443}
      - IGNORE_CERTIFICATE_ERRORS=true
      - NPM_CONFIG_REGISTRY=${NPM_CONFIG_REGISTRY:-}
      - DENO_DIR=/deno
      - DENO_INSTALL_ROOT=/deno
      - REDIS_URL=redis://redis:6379
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-localbucket}
    volumes:
      - ./deno.json:/app/deno.json
      - ./app/shared:/app/app/shared
      - ./app/worker:/app/app/worker
      - ./app/browser/dist:/app/app/browser/dist
      - ./app/api:/app/app/api
      - /tmp:/tmp
      - /var/run/docker.sock:/var/run/docker.sock
      - deno:/deno
      - node_modules:/app/node_modules
    extra_hosts:
      - host.docker.internal:host-gateway
      - minio.worker-metaframe.localhost:host-gateway
      - worker-metaframe.localhost:host-gateway
      - worker-metaframe-api2.dev:host-gateway
    networks:
      - default
    logging:
      driver: ${LOGGING_WORKER:-json-file}

  create-browser-assets:
    build:
      context: .
      dockerfile: app/browser/Dockerfile
    command: just watch
    working_dir: /app/app/browser
    environment:
      # Disabling this, was getting errors.
      # - NPM_CONFIG_REGISTRY=${NPM_CONFIG_REGISTRY:-}
      - SERVER_ORIGIN=https://worker-metaframe.localhost:${APP_PORT:-443}
      - DENO_DIR=/deno
      - DENO_INSTALL_ROOT=/deno
    volumes:
      - deno:/deno
      - .:/app
      - browser_node_modules:/app/app/browser/node_modules
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # ensure the s3 bucket exists in this stack
  create-s3-bucket:
    depends_on:
      minio:
        condition: service_healthy
    image: denoland/deno:alpine-2.1.4
    command: deno run --watch --allow-all ./src/s3/create-bucket-development.ts
    working_dir: /app/app/api
    environment:
      - NPM_CONFIG_REGISTRY=${NPM_CONFIG_REGISTRY:-}
      - AWS_ACCESS_KEY_ID=minioaccesskey123123
      - AWS_SECRET_ACCESS_KEY=minioaccesskey123123
      - AWS_ENDPOINT=http://minio:9000
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-localbucket}
      - DENO_DIR=/deno
      - DENO_INSTALL_ROOT=/deno
      - AWS_REGION=${AWS_REGION:-us-west-2}
    extra_hosts:
      - host.docker.internal:host-gateway
      - minio.worker-metaframe.localhost:host-gateway
    volumes:
      - ./app/api/deno.json:/app/app/api/deno.json
      - ./app/api/src:/app/app/api/src
      - ./deno.json:/app/deno.json
      - ./app/shared:/app/app/shared
      - ./.empty:/app/app/cli
      - ./.empty:/app/app/test
      - ./.empty:/app/app/worker
      - ./.empty:/app/app/browser/dist
      - ./.empty:/app/app/worker
      - deno:/deno
    networks:
      - default
  minio:
    depends_on:
      traefik:
        condition: service_started
    image: minio/minio:RELEASE.2024-04-28T17-53-50Z
    command: server --address 0.0.0.0:9000 /data
    expose:
      - "9000"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      MINIO_SERVER_URL: https://minio.worker-metaframe.localhost:${APP_PORT:-443}
      MINIO_REGION: ${AWS_REGION:-us-west-2}
      MINIO_ROOT_PASSWORD: minioaccesskey123123
      MINIO_ROOT_USER: minioaccesskey123123
    extra_hosts:
      - host.docker.internal:host-gateway
      - minio.worker-metaframe.localhost:host-gateway
    restart: always
    volumes:
      - ./app/.cache/minio:/data
    networks:
      - default
    labels:
      - "custom.label=worker-metaframe.localhost"
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`minio.worker-metaframe.localhost`)"
      - "traefik.http.routers.minio.entrypoints=websecure"
      # Apply the CORS middleware to the router
      - "traefik.http.routers.minio.middlewares=cors-middleware@file"

  traefik:
    image: traefik:v2.11.13
    command:
      - --global.sendanonymoususage=false
      - --api.insecure=true
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.watch=true
      - --providers.docker.constraints=Label(`custom.label`,`worker-metaframe.localhost`)
      - --providers.docker.exposedbydefault=false
      - --providers.file.filename=/etc/traefik/config.yml
      - --providers.file.watch=true
      - --log.level=INFO
      - --log.format=common
      - --entrypoints.web.address=:80
      # Automatically redirecting HTTP to HTTPS
      # - --entrypoints.http.http.redirections.entryPoint.to=https
      # - --entrypoints.http.http.redirections.entryPoint.scheme=https
      - --entrypoints.websecure.address=:${APP_PORT:-443}
      - --entrypoints.websecure.http.tls=true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik=true"
    # Define the CORS middleware in the config.yml
    # I tried so hard to define it here but it would not work
    extra_hosts:
      - host.docker.internal:host-gateway
    ports:
      # The Traefik Web UI port (enabled by api:insecure: true in traefik.yml)
      # - "${TRAEFIK_WEB_UI_PORT:-8080}:8080"
      # HTTPS / SSL port
      - "${APP_PORT:-443}:${APP_PORT:-443}"
      # Disable the other ports to avoid conflicts
      # - "80:80"
    volumes:
      - ./app/.cache/traefik/certs:/etc/certs:ro
      - ./app/.traefik/config.yml:/etc/traefik/config.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - default

  redis:
    image: redis:7.2.4
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
    networks:
      - default

  # deno.kv in the cloud is a shared db, in docker-compose we need to
  # run it as a service to replicate the behavior
  denokv:
    image: ghcr.io/denoland/denokv
    command: --sqlite-path /data/denokv.sqlite serve --access-token localdenoaccesstoken
    volumes:
      - denokv:/data

volumes:
  denokv:
    driver: local
