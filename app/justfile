set shell        := ["bash", "-c"]
set dotenv-load  := true

APP_FQDN         := "worker-metaframe.localhost"
APP_PORT         := env_var_or_default("APP_PORT", "443")

normal           := '\033[0m'
green            := "\\e[32m"

@_help:
    just --list --unsorted --list-heading $'Commands: (all services)\n'

# Develop: open the browser and start the dev stack
dev +args="": _ensure-all open (up args)

# Start the docker compose local stack
@up +args="": _ensure-all _mkcert 
    docker compose up --remove-orphans {{args}}

# 'docker compose down'
down +args="": _ensure-all
    docker compose down {{args}}

# Open the browser to the local frontend
@open: _ensure-all
    deno run --allow-all https://deno.land/x/metapages@v0.0.27/exec/open_url.ts 'https://metapages.github.io/load-page-when-available/?url=https://{{APP_FQDN}}:{{APP_PORT}}#?job=JTdCJTIyY29tbWFuZCUyMiUzQSUyMmxzJTIwLWxhJTIyJTJDJTIyaW1hZ2UlMjIlM0ElMjJhbHBpbmUlM0EzLjE4LjUlMjIlN0Q=&queue=local1' || true

# Quick compilation checks
@check: _ensure-all
  just worker/check
  just api/check
  just browser/check
  just test/check
  just shared/check
  just cli/check

@test:
    docker compose up --remove-orphans --detach
    just worker/test
    just test/test
    just shared/test
    just cli/test

# Clean up the project
@test-cleanup:
    docker compose down -v

clean:
    rm -rf .cache
    just browser/clean
    docker compose down -v

# Publish e.g. docker images with whatever versioning scheme is appropriate
@publish-versioned-artifacts version="":
    just worker/docker-image-publish {{version}}

# DEV: generate TLS certs for HTTPS over localhost https://blog.filippo.io/mkcert-valid-https-certificates-for-localhost/
@_mkcert: _ensure_mkcert
    if [ ! -f .cache/traefik/certs/local-key.pem ]; then \
        FQDN={{APP_FQDN}} CERT_NAME=local CERTS_DIR=.cache/traefik/certs deno run --allow-all https://deno.land/x/metapages@v0.0.27/commands/ensure_mkcert.ts ;\
    fi

@_ensure-all: _ensure_docker _ensure_deno

@_ensure_docker:
    if ! command -v docker > /dev/null; then \
        echo -e "\nDocker is not installed. Please install Docker and try again: ðŸ‘‰ {{green}}https://docs.docker.com/engine/install/{{normal}}\n"; \
        exit 1; \
    fi

@_ensure_deno:
    if ! command -v deno > /dev/null; then \
        echo -e "\nDeno is not installed. Please install Deno and try again: ðŸ‘‰ {{green}}https://docs.deno.com/runtime/manual/getting_started/installation{{normal}}\n"; \
        exit 1; \
    fi

@_ensure_mkcert:
    if ! command -v mkcert > /dev/null; then \
        echo -e "\nmkcert is not installed. Please install mkcert and try again: ðŸ‘‰ {{green}}https://github.com/FiloSottile/mkcert?tab=readme-ov-file#installation{{normal}}\n"; \
        exit 1; \
    fi