set shell := ["bash", "-c"]
set dotenv-load := true
set quiet := true

APP_FQDN := "worker-metaframe.localhost"
APP_PORT := env_var_or_default("APP_PORT", "443")
normal := '\033[0m'
green := "\\e[32m"

@_help:
    just --list --unsorted --list-heading $'Commands: (all services)\n'
    echo -e ""
    echo -e "    Sub-commands (e.g. just browser dev):"
    echo -e "       {{ green }}browser{{ normal }}       -> just browser"
    echo -e "       {{ green }}worker{{ normal }}        -> just worker"
    echo -e "       {{ green }}api{{ normal }}           -> just api"

# Validate mode
@_validate_mode mode="":
    @if [ "{{ mode }}" = "remote" ] || [ "{{ mode }}" = "local" ]; then :; else echo "Error: Mode must be 'remote' or 'local'" >&2; exit 1; fi

# Develop: open the browser and start the dev stack [remote|local]
@dev mode="remote" +args="": (_validate_mode mode) _build_shared _ensure-all open (_up mode args)

# Start the docker compose local stack
@_up mode="remote" +args="": (_validate_mode mode) _ensure-all _mkcert _build_shared
    #!/usr/bin/env bash
    # A local NPM registry saves time, bandwidth, and avoids rate limits
    # If a local npm registry cache is running, use that for all npm modules (faster and better when internet not great)
    # docker run -d -v verdaccio_npm_storage:/verdaccio/storage --name verdaccio -p 4873:4873 verdaccio/verdaccio
    # https://verdaccio.org/docs/docker/
    STATUS_CODE=$(curl --max-time 2 --write-out '%{http_code}' --silent --output /dev/null http://localhost:4873)
    if [ $STATUS_CODE = "200" ]; then
        export NPM_CONFIG_REGISTRY=http://host.docker.internal:4873
    fi
    docker compose --project-name=dev -f ../docker-compose.yml -f ../docker-compose-{{ mode }}.yml rm --force 2>/dev/null || true
    docker rm dev-worker-1 2>/dev/null || true
    docker compose --project-name=dev -f ../docker-compose.yml -f ../docker-compose-{{ mode }}.yml up --remove-orphans {{ args }}

# Shut down the local stack: 'docker compose down'
@down mode="remote" +args="": (_validate_mode mode)
    #!/usr/bin/env bash
    docker compose --project-name=dev -f ../docker-compose.yml -f ../docker-compose-{{ mode }}.yml down {{ args }}

deploy version="":
    #!/usr/bin/env bash
    set -euo pipefail

    # Get version argument or bump current version
    VERSION={{ version }}
    if [ "$VERSION" = "" ]; then
        # Get current version from mod.json
        CURRENT_VERSION=$(cat worker/mod.json | jq -r '.version')
        # Split version into components
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        # Increment patch version
        PATCH=$((PATCH + 1))
        # Construct new version
        VERSION="$MAJOR.$MINOR.$PATCH"
    fi

    # Update version in mod.json
    TMP=$(mktemp)
    jq ".version = \"$VERSION\"" worker/mod.json > "$TMP" && mv "$TMP" worker/mod.json

    echo "chore: bump version to $VERSION"
    # Commit changes
    git add worker/mod.json
    git commit -m "chore: bump version to $VERSION"

# Format all supported files
@fmt-check +args="":
    cd worker && deno fmt --check {{ args }}
    cd api && deno fmt --check {{ args }}
    cd test && deno fmt --check {{ args }}
    cd cli && deno fmt --check {{ args }}
    cd shared && deno fmt --check {{ args }}
    find */justfile -exec just --fmt --check --unstable -f {} {{ args }} \;
    just browser/fmt-check

# Runs All Functional Tests and checks code
test mode="remote" +args="": check (_validate_mode mode)
    #!/usr/bin/env bash
    set -e # exit when any command fails, preserving the status of the failed command

    cleanup() {
        echo "Cleaning up test stack..."
        docker compose --project-name=test -f ../docker-compose.yml -f ../docker-compose-{{ mode }}.yml -f ../docker-compose-test-{{ mode }}.yml down 2>/dev/null || true
    }

    trap cleanup EXIT # cleanup when the script exits for any reason, including failure

    cleanup

    # Generate a random port between 10000-65535 and ensure it's not in use
    get_free_port() {
        while true; do
            local port=$(shuf -i 10000-65535 -n 1)
            # Check if port is in use using netstat or ss
            # Check if port is in use using netstat/ss on Linux or lsof on macOS
            if [ "$(uname)" == "Linux" ]; then
                if ! ss -tuln | grep -q ":${port} "; then
                    echo "${port}"
                    break
                fi
            else
                if ! lsof -i ":${port}" > /dev/null 2>&1; then
                    echo "${port}"
                    break
                fi
            fi
        done
    }

    export APP_PORT=$(get_free_port)
    echo -e "Using port ${APP_PORT}"

    # Set API_URL and QUEUE_ID based on mode
    if [ "{{ mode }}" = "local" ]; then
        export API_URL="https://worker-metaframe.localhost:{{ APP_PORT }}"
        export QUEUE_ID="local"
    else
        export API_URL="http://api1:8081"
        export QUEUE_ID="local1"
    fi

    # Get host IP address for Linux
    if [ "$(uname)" == "Linux" ]; then
        HOST_IP=$(ip -4 addr show docker0 | grep -Po 'inet \K[\d.]+')
    else
        HOST_IP="host.docker.internal"
    fi

    export AWS_SECRET_ACCESS_KEY="minioaccesskey123123"
    export AWS_ACCESS_KEY_ID="minioaccesskey123123"
    export AWS_ENDPOINT="http://minio:9000"
    export AWS_REGION="us-west-2"
    export AWS_S3_BUCKET="localbucket"
    export REDIS_URL="redis://localhost:6379"

    docker rm test-worker-1 2>/dev/null || true
    just shared/build
    # tests don't need the browser but dir needs to exist
    mkdir -p browser/dist
    docker compose --project-name=test -f ../docker-compose.yml -f ../docker-compose-{{ mode }}.yml -f ../docker-compose-test-{{ mode }}.yml up --build --remove-orphans --detach
    # functional tests
    just test/test-in-docker {{ mode }}
    just worker/test
    just shared/test
    just cli/test

# Clean up the project
@clean mode="remote" +args="": (_validate_mode mode)
    #!/usr/bin/env bash
    docker compose --project-name=dev -f ../docker-compose.yml -f ../docker-compose-{{ mode }}.yml down -v
    just browser/clean
    rm -rf .cache

# Open the browser to the local frontend
@open: _ensure-all
    deno run --allow-all https://deno.land/x/metapages@v0.0.27/exec/open_url.ts 'https://metapages.github.io/load-page-when-available/?url=https://{{ APP_FQDN }}:{{ APP_PORT }}#?job=JTdCJTIyY29tbWFuZCUyMiUzQSUyMmxzJTIwLWxhJTIyJTJDJTIyaW1hZ2UlMjIlM0ElMjJhbHBpbmUlM0EzLjE4LjUlMjIlN0Q=&queue=local1' || true

# Quick compilation checks
@check: _ensure-all
    echo -n "worker check..."
    just worker/check
    echo -n "api check..."
    just api/check
    echo -n "browser check..."
    just browser/check
    echo -n "test check..."
    just test/check
    echo -n "shared check..."
    just shared/check
    echo -n "cli check..."
    just cli/check

# Format all supported files
@fmt +args="":
    just browser/fmt
    cd worker && deno fmt {{ args }}
    cd api && deno fmt {{ args }}
    cd test && deno fmt {{ args }}
    cd cli && deno fmt {{ args }}
    cd shared && deno fmt {{ args }}
    find . -name justfile -exec just --fmt --unstable -f {} {{ args }} \;

# Calls the status endpoint of the local dev stack
status-dev:
    curl https://{{ APP_FQDN }}:{{ APP_PORT }}/local1/status | jq .

# Calls the status endpoint of the local test stack
status-test port:
    curl https://{{ APP_FQDN }}:{{ port }}/local1/status | jq .

# Calls the status endpoint of the production API at a given queue
status-prod queue="public1":
    curl https://container.mtfm.io/{{ queue }}/status | jq .

# Clean up the test stack, if it didn't exit cleanly
@test-cleanup:
    docker compose --project-name=test -f ../docker-compose.yml -f ../docker-compose-remote.yml down || true

# Publish worker docker images with whatever versioning scheme is appropriate
@publish-versioned-artifacts version="":
    just worker/publish-docker-images {{ version }}

# DEV: generate TLS certs for HTTPS over localhost https://blog.filippo.io/mkcert-valid-https-certificates-for-localhost/
_mkcert: _ensure_mkcert
    #!/usr/bin/env bash
    rm -rf .cache/traefik/certs
    mkdir -p .cache/traefik/certs/ ;
    mkcert -cert-file .cache/traefik/certs/local-cert.pem -key-file .cache/traefik/certs/local-key.pem {{ APP_FQDN }} minio.{{ APP_FQDN }} worker-metaframe.localhost worker-metaframe-api2.dev minio.worker-metaframe.localhost localhost ;
    if grep -q "{{ APP_FQDN }}" /etc/hosts; then
        echo -e "âœ… Hostname {{ APP_FQDN }} found in /etc/hosts"
    else
        echo -e "ðŸ’¥ Hostname {{ APP_FQDN }} not found in /etc/hosts"
        echo -e "ðŸ‘‰ Add: '127.0.0.1   {{ APP_FQDN }}' to /etc/hosts"
        exit 1
    fi
    if grep -q "minio.{{ APP_FQDN }}" /etc/hosts; then
        echo -e "âœ… Hostname minio.{{ APP_FQDN }} found in /etc/hosts"
    else
        echo -e "ðŸ’¥ Hostname minio.{{ APP_FQDN }} not found in /etc/hosts"
        echo -e "ðŸ‘‰ Add: '127.0.0.1   minio.{{ APP_FQDN }}' to /etc/hosts"
        exit 1
    fi
    # if [ ! -f .cache/traefik/certs/local-key.pem ]; then \
    #     FQDN={{ APP_FQDN }} CERT_NAME=local CERTS_DIR=.cache/traefik/certs deno run --allow-all https://deno.land/x/metapages@v0.0.27/commands/ensure_mkcert.ts ;\
    # fi

@_ensure-all: _ensure_docker _ensure_deno

@_ensure_docker:
    if ! command -v docker > /dev/null; then \
        echo -e "\nDocker is not installed. Please install Docker and try again: ðŸ‘‰ {{ green }}https://docs.docker.com/engine/install/{{ normal }}\n"; \
        exit 1; \
    fi

@_ensure_deno:
    if ! command -v deno > /dev/null; then \
        echo -e "\nDeno is not installed. Please install Deno and try again: ðŸ‘‰ {{ green }}https://docs.deno.com/runtime/manual/getting_started/installation{{ normal }}\n"; \
        exit 1; \
    fi

@_ensure_mkcert:
    if ! command -v mkcert > /dev/null; then \
        echo -e "\nmkcert is not installed. Please install mkcert and try again: ðŸ‘‰ {{ green }}https://github.com/FiloSottile/mkcert?tab=readme-ov-file#installation{{ normal }}\n"; \
        exit 1; \
    fi

# app subdirectory commands

alias browser := _browser

@_browser +args="":
    just browser/{{ args }}

# app subdirectory commands

alias worker := _worker

@_worker +args="":
    just worker/{{ args }}

# app subdirectory commands

alias api := _api

@_api +args="":
    just api/{{ args }}

# Run linting for all apps
@lint:
    echo "Running lint for all apps..."
    just browser/lint
    just worker/lint
    just api/lint
    just cli/lint
    just shared/lint
    just test/lint

# Run lint-fix commands for all apps
@lint-fix:
    echo "Running lint-fix for all apps..."
    just browser/lint-fix
    just worker/lint-fix
    just api/lint-fix
    just cli/lint-fix
    just shared/lint-fix
    just test/lint-fix

# Run fix commands for all apps
@fix:
    echo "Running fix for all apps..."
    just browser/fix
    just worker/fix
    just api/fix
    just cli/fix
    just shared/fix
    just test/fix

# Run CI
@ci: fmt-check lint

# Add new helper recipe for building shared dependencies
@_build_shared:
    just shared/build
