set shell        := ["bash", "-c"]
set dotenv-load  := true

APP_FQDN         := "worker-metaframe.localhost"
APP_PORT         := env_var_or_default("APP_PORT", "443")

normal           := '\033[0m'
green            := "\\e[32m"

@_help:
    just --list --unsorted --list-heading $'Commands: (all services)\n'
    echo -e ""
    echo -e "    Sub-commands (e.g. just browser dev):"
    echo -e "       {{green}}browser{{normal}}       -> just browser"
    echo -e "       {{green}}worker{{normal}}        -> just worker"
    echo -e "       {{green}}api{{normal}}           -> just api"



# Develop: open the browser and start the dev stack
dev +args="": _ensure-all open (up args)

# Start the docker compose local stack
up +args="": _ensure-all _mkcert
    #!/usr/bin/env bash
    # A local NPM registry saves time, bandwidth, and avoids rate limits
    # If a local npm registry cache is running, use that for all npm modules (faster and better when internet not great)
    # docker run -d -v verdaccio_npm_storage:/verdaccio/storage --name verdaccio -p 4873:4873 verdaccio/verdaccio
    # https://verdaccio.org/docs/docker/
    STATUS_CODE=$(curl --max-time 2 --write-out '%{http_code}' --silent --output /dev/null http://localhost:4873)
    if [ $STATUS_CODE = "200" ]; then
        export NPM_CONFIG_REGISTRY=http://host.docker.internal:4873
    fi
    # Having issues with the worker
    docker compose --project-name=dev rm --force
    docker rm dev-worker-1 || true
    docker compose --project-name=dev up --remove-orphans {{args}}

# Shut down the local stack: 'docker compose down'
down +args="":
    docker compose --project-name=dev down {{args}}

# Open the browser to the local frontend
@open: _ensure-all
    deno run --allow-all https://deno.land/x/metapages@v0.0.27/exec/open_url.ts 'https://metapages.github.io/load-page-when-available/?url=https://{{APP_FQDN}}:{{APP_PORT}}#?job=JTdCJTIyY29tbWFuZCUyMiUzQSUyMmxzJTIwLWxhJTIyJTJDJTIyaW1hZ2UlMjIlM0ElMjJhbHBpbmUlM0EzLjE4LjUlMjIlN0Q=&queue=local1' || true

# Quick compilation checks
@check: _ensure-all
  just worker/check
  just api/check
  just browser/check
  just test/check
  just shared/check
  just cli/check

status queue="local1":
    curl https://{{APP_FQDN}}:{{APP_PORT}}/{{queue}}/status | jq .

status-test queue="local1":
    APP_PORT=4470 curl https://{{APP_FQDN}}:4470/{{queue}}/status | jq .

status-prod queue="public1":
    curl https://container.mtfm.io/{{queue}}/status | jq .

test: check
    #!/usr/bin/env bash
    set -e # exit when any command fails, preserving the status of the failed command

    cleanup() {
        docker compose --project-name=test down -v || true
    }

    trap cleanup EXIT # cleanup when the script exits for any reason, including failure

    cleanup
    # A local NPM registry saves time, bandwidth, and avoids rate limits
    STATUS_CODE=$(curl --write-out '%{http_code}' --silent --output /dev/null http://localhost:4873 || true)
    if [ $STATUS_CODE = "200" ]; then
        export NPM_CONFIG_REGISTRY=http://host.docker.internal:4873
    fi
    APP_PORT=4470 docker compose --project-name=test up --remove-orphans --detach
    APP_PORT=4470 just worker/test
    APP_PORT=4470 just test/test
    APP_PORT=4470 just shared/test
    APP_PORT=4470 just cli/test
    docker compose --project-name=test down -v || true

# Clean up the project
@test-cleanup:
    docker compose --project-name=test down -v || true

clean:
    rm -rf .cache
    just browser/clean
    docker compose --project-name=dev down -v

# Publish e.g. docker images with whatever versioning scheme is appropriate
@publish-versioned-artifacts version="":
    just worker/docker-image-publish {{version}}

# DEV: generate TLS certs for HTTPS over localhost https://blog.filippo.io/mkcert-valid-https-certificates-for-localhost/
@_mkcert: _ensure_mkcert
    if [ ! -f .cache/traefik/certs/local-key.pem ]; then \
        FQDN={{APP_FQDN}} CERT_NAME=local CERTS_DIR=.cache/traefik/certs deno run --allow-all https://deno.land/x/metapages@v0.0.27/commands/ensure_mkcert.ts ;\
    fi

@_ensure-all: _ensure_docker _ensure_deno

@_ensure_docker:
    if ! command -v docker > /dev/null; then \
        echo -e "\nDocker is not installed. Please install Docker and try again: ðŸ‘‰ {{green}}https://docs.docker.com/engine/install/{{normal}}\n"; \
        exit 1; \
    fi

@_ensure_deno:
    if ! command -v deno > /dev/null; then \
        echo -e "\nDeno is not installed. Please install Deno and try again: ðŸ‘‰ {{green}}https://docs.deno.com/runtime/manual/getting_started/installation{{normal}}\n"; \
        exit 1; \
    fi

@_ensure_mkcert:
    if ! command -v mkcert > /dev/null; then \
        echo -e "\nmkcert is not installed. Please install mkcert and try again: ðŸ‘‰ {{green}}https://github.com/FiloSottile/mkcert?tab=readme-ov-file#installation{{normal}}\n"; \
        exit 1; \
    fi

# app subdirectory commands
alias browser := _browser
@_browser +args="":
    just browser/{{args}}

# app subdirectory commands
alias worker := _worker
@_worker +args="":
    just worker/{{args}}

# app subdirectory commands
alias api := _api
@_api +args="":
    just api/{{args}}
