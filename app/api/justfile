# Always use locally installed tools (always pin versions)
set shell                          := ["bash", "-c"]
set dotenv-load                    := true
set export                         := true
DENO_DEPLOY_TOKEN                  := env_var_or_default("DENO_DEPLOY_TOKEN", "")
# Make sure to include the just and deployctl paths here
PATH                               := env_var_or_default("PATH", "") + ":" + env_var_or_default("HOME", "") + "/.deno/bin:/snap/bin"

# minimal formatting, bold is very useful
bold                  := '\033[1m'
normal                := '\033[0m'

@_help:
    just --list --unsorted --list-heading $'Api commands:\n'

# Run the server locally
@dev +args="":
    deno run --watch --allow-all --unstable-kv --unstable-broadcast-channel src/server.ts {{args}}

# Quick compile checks
@check:
    deno check src/server.ts
    echo "✅ api typescript compilation"

# Perform a deploy to https://dash.deno.com/projects/compute-queue-api
@build: check
    rm -rf dist
    mkdir -p dist
    cp -rL src dist/
    # The browser build goes to ../browser/dist
    # and ../browser/dist is symlinked to ./assets
    just ../browser/build
    cp -rL assets dist/
    cp deno.json dist/
    cp deno.lock dist/

# Build, then run the server locally. TO skip the build: 'just _serve'
serve: build _serve
_serve:
    PORT=3073 \
    DENO_DIR=.deno \
    DENO_INSTALL_ROOT=.deno \
        deno run --allow-sys --allow-net --allow-read --allow-env --unstable-kv src/server.ts

# Perform a fresh build and deploy to deno-deploy
deploy: _ensure_deployctl clean build
    cd dist && \
        deployctl deploy --project=compute-queue-api --prod src/server.ts

# Delete generate assets and caches
clean:
    rm -rf dist

@_ensure_deployctl:
    if ! command -v deployctl &> /dev/null; then echo '‼️ deployctl is being installed ‼️'; deno install -Arf jsr:@deno/deployctl; fi