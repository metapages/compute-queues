services:

  # api1 is public facing, while api2 is internal and the workers communicate with it
  # This way we are also testing BroadcaseChannel functionality
  test:
    container_name: wm-test
    depends_on:
      api1: 
        condition: service_healthy
      api2: 
        condition: service_healthy
      minio:
        condition: service_healthy
      denokv:
        condition: service_started
    image: denoland/deno:alpine-1.43.6
    command: deno test --watch --allow-all --unstable-broadcast-channel --unstable-kv .
    working_dir: /app/test
    environment:
      - API_URL=http://api1:8081
      - DENO_DIR=/deno
      - DENO_INSTALL_ROOT=/deno
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-minioaccesskey123123}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-minioaccesskey123123}
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - AWS_ENDPOINT=${AWS_ENDPOINT:-http://minio.worker-metaframe.localhost}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-localbucket}
      - DENO_KV_ACCESS_TOKEN=localdenoaccesstoken
      - DENO_KV_URL=http://denokv:4512
      - REDIS_URL=redis://redis:6379
    volumes:
      - deno:/deno
      - .:/app
    networks:
      - default
    logging:
      driver: ${LOGGING_TESTS:-json-file}

  # api1 is public facing, while api2 is internal and the workers communicate with it
  # This way we are also testing BroadcaseChannel functionality
  api1:
    container_name: wm-api1
    depends_on:
      traefik: 
        condition: service_started
      minio:
        condition: service_healthy
      denokv:
        condition: service_started
      redis:
        condition: service_healthy
    image: denoland/deno:alpine-1.43.6
    command: deno run --watch --allow-all --unstable-broadcast-channel --unstable-kv src/server.ts
    working_dir: /app/api
    healthcheck:
      test: sh -c 'PORT=8081 deno run --allow-net --allow-env src/util/healthcheck.ts'
      interval: 5s
      timeout: 1s
      retries: 3
    expose:
      - "8081"
    environment:
      - PORT=8081
      - DENO_DIR=/deno
      - DENO_INSTALL_ROOT=/deno
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-minioaccesskey123123}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-minioaccesskey123123}
      - AWS_REGION=${AWS_REGION:-us-west-2}
      # - AWS_ENDPOINT=${AWS_ENDPOINT:-http://minio:9000}
      - AWS_ENDPOINT=${AWS_ENDPOINT:-http://minio.worker-metaframe.localhost}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-localbucket}
      - DENO_KV_ACCESS_TOKEN=localdenoaccesstoken
      - DENO_KV_URL=http://denokv:4512
      - REDIS_URL=redis://redis:6379
    volumes:
      - deno:/deno
      - ./shared:/app/shared
      - ./browser/dist:/app/browser/dist
      - ./api:/app/api
    networks:
      - default
    extra_hosts:
      - host.docker.internal:host-gateway
      - local.graphql.nhost.run:host-gateway
      - minio.worker-metaframe.localhost:host-gateway
    labels:
      - "custom.label=worker-metaframe.localhost"
      - "traefik.enable=true"
      - "traefik.http.routers.api1.rule=Host(`worker-metaframe.localhost`)"
      - "traefik.http.routers.api1.tls=true"
      - "traefik.http.routers.api1.entrypoints=websecure"
    logging:
      driver: ${LOGGING_API:-json-file}

  # This api is not connected to the public internet
  # but workers do communicate with it
  api2:
    container_name: wm-api2
    depends_on:
      traefik: 
        condition: service_started
      minio:
        condition: service_started
      denokv:
        condition: service_started
      redis:
        condition: service_healthy
    image: denoland/deno:alpine-1.43.6
    command: deno run --watch --allow-all --unstable-broadcast-channel --unstable-kv src/server.ts
    working_dir: /app/api
    healthcheck:
      test: sh -c 'PORT=8082 deno run --allow-net --allow-env src/util/healthcheck.ts'
      interval: 5s
      timeout: 1s
      retries: 3
    expose:
      - "8082"
    environment:
      - PORT=8082
      - DENO_DIR=/deno
      - DENO_INSTALL_ROOT=/deno
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-minioaccesskey123123}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-minioaccesskey123123}
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - AWS_ENDPOINT=${AWS_ENDPOINT:-http://minio.worker-metaframe.localhost}
      # - AWS_ENDPOINT=${AWS_ENDPOINT:-http://minio:9000}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-localbucket}
      - DENO_KV_ACCESS_TOKEN=localdenoaccesstoken
      - DENO_KV_URL=http://denokv:4512
      - REDIS_URL=redis://redis:6379
    volumes:
      - deno:/deno
      - ./shared:/app/shared
      - ./browser/dist:/app/browser/dist
      - ./api:/app/api
    networks:
      - default
    extra_hosts:
      - host.docker.internal:host-gateway
      - local.graphql.nhost.run:host-gateway
      - minio.worker-metaframe.localhost:host-gateway
    labels:
      - "custom.label=worker-metaframe.localhost"
      # - "traefik.enable=true"
      # - "traefik.http.routers.api2.rule=Host(`worker-metaframe.localhost`)"
      # - "traefik.http.routers.api2.tls=true"
      # - "traefik.http.routers.api2.entrypoints=websecure"
    logging:
      driver: ${LOGGING_API:-json-file}

  worker:
    container_name: wm-worker
    depends_on:
      api1: 
        condition: service_healthy
      api2: 
        condition: service_healthy
      minio: 
        condition: service_started
    image: metapage/metaframe-docker-worker:${DOCKER_TAG:-cache}
    # Add dev useful stuff
    entrypoint: ["deno", "run", "--watch", "--allow-all", "src/cli.ts"]
    command: run --cores=1 --api-server-address=http://api2:8082 local1
    build:
      context: .
      dockerfile: worker/Dockerfile
      target: worker
    environment:
      - DENO_DIR=/deno
      - DENO_INSTALL_ROOT=/deno
    volumes:
      - ./shared:/app/shared
      - ./worker:/app/worker
      # Must match the host path name since used by docker to mount host directories
      - /tmp:/tmp
      - /var/run/docker.sock:/var/run/docker.sock
      - deno:/deno
    extra_hosts:
      - host.docker.internal:host-gateway
      - minio.worker-metaframe.localhost:host-gateway
    networks:
      - default
    logging:
      driver: ${LOGGING_WORKER:-json-file}


  worker2:
    container_name: wm-worker2
    depends_on:
      api1: 
        condition: service_healthy
      api2: 
        condition: service_healthy
      minio: 
        condition: service_started
    image: metapage/metaframe-docker-worker:${DOCKER_TAG:-cache}
    # Add dev useful stuff
    entrypoint: ["deno", "run", "--watch", "--allow-all", "src/cli.ts"]
    command: run --cores=1 --api-server-address=http://api2:8082 local1
    build:
      context: .
      dockerfile: worker/Dockerfile
      target: worker
    environment:
      - DENO_DIR=/deno
      - DENO_INSTALL_ROOT=/deno
    volumes:
      - ./shared:/app/shared
      - ./worker:/app/worker
      # Must match the host path name since used by docker to mount host directories
      - /tmp:/tmp
      - /var/run/docker.sock:/var/run/docker.sock
      - deno:/deno
    extra_hosts:
      - host.docker.internal:host-gateway
      - minio.worker-metaframe.localhost:host-gateway
    networks:
      - default
    logging:
      driver: ${LOGGING_WORKER:-json-file}

  create-browser-assets:
    container_name: wm-create-browser-assets
    build:
      context: .
      dockerfile: browser/Dockerfile
    command: just watch
    working_dir: /app/browser
    environment:
      - SERVER_ORIGIN=https://worker-metaframe.localhost
    volumes:
      - ../.git:/.git
      - ./browser/dist:/app/browser/dist
      - ./browser/index.html:/app/browser/index.html
      - ./browser/justfile:/app/browser/justfile
      - ./browser/package-lock.json:/app/browser/package-lock.json
      - ./browser/package.json:/app/browser/package.json
      - ./browser/public:/app/browser/public
      - ./browser/src:/app/browser/src
      - ./browser/tsconfig.json:/app/browser/tsconfig.json
      - ./browser/vite.config.ts:/app/browser/vite.config.ts
      - ./shared:/app/shared
      - node_modules:/app/browser/node_modules

  # Ensures the S3 bucket exists
  # The could be possibly done better elsewhere?
  create-s3-bucket:
    container_name: wm-create-s3-bucket
    depends_on:
      minio: 
        condition: service_started
    image: denoland/deno:alpine-1.43.6
    command: deno run --watch --allow-all ./src/s3/create-bucket-development.ts
    working_dir: /app/api
    environment:
      - AWS_ACCESS_KEY_ID=minioaccesskey123123
      - AWS_SECRET_ACCESS_KEY=minioaccesskey123123
      - AWS_ENDPOINT=http://minio.worker-metaframe.localhost
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-localbucket}
      - DENO_DIR=/deno
      - DENO_INSTALL_ROOT=/deno
      - AWS_REGION=${AWS_REGION:-us-west-2}
    extra_hosts:
      - host.docker.internal:host-gateway
      - minio.worker-metaframe.localhost:host-gateway
    volumes:
      - ./api/src:/app/api/src
      - deno:/deno

  minio:
    container_name: wm-minio
    depends_on:
      traefik: 
        condition: service_started
    image: minio/minio:RELEASE.2024-04-28T17-53-50Z
    command: server --address :9000 /data
    expose:
      - "9000"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      MINIO_SERVER_URL: http://minio.worker-metaframe.localhost
      MINIO_REGION: ${AWS_REGION:-us-west-2}
      MINIO_ROOT_PASSWORD: minioaccesskey123123
      MINIO_ROOT_USER: minioaccesskey123123
    extra_hosts:
      - host.docker.internal:host-gateway
    restart: always
    volumes:
      - .cache/minio:/data
    labels:
      - "custom.label=worker-metaframe.localhost"
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`minio.worker-metaframe.localhost`)"
      - "traefik.http.routers.minio.entrypoints=web"

  denokv:
    container_name: wm-denokv
    image: ghcr.io/denoland/denokv
    command: --sqlite-path /data/denokv.sqlite serve --access-token localdenoaccesstoken
    volumes:
      - denokv:/data
    ports:
      - "4512:4512"

  traefik:
    container_name: wm-traefik
    image: traefik:v2.10.1
    command:
      - --global.sendanonymoususage=false
      - --api.insecure=true
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.watch=true
      - --providers.docker.constraints=Label(`custom.label`,`worker-metaframe.localhost`)
      - --providers.docker.exposedbydefault=false
      - --providers.file.filename=/etc/traefik/config.yml
      - --providers.file.watch=true
      - --log.level=INFO
      - --log.format=common
      - --entrypoints.web.address=:80
      # Not automatically redirecting HTTP to HTTPS until minio presigned URLs 
      # are validated to work with HTTPS
      # - --entrypoints.http.http.redirections.entryPoint.to=https
      # - --entrypoints.http.http.redirections.entryPoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
    labels:
     - "traefik.enable=true"
     - "traefik.http.routers.traefik=true"
    extra_hosts:
      - host.docker.internal:host-gateway
    ports:
      # HTTPS / SSL port
      - "${APP_PORT:-443}:443"
      - "80:80"
      # The Traefik Web UI port (enabled by api:insecure: true in traefik.yml)
      - "${TRAEFIK_WEB_UI_PORT:-8080}:8080"
    volumes:
      - .cache/traefik/certs:/etc/certs:ro
      - .traefik/config.yml:/etc/traefik/config.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro

  redis:
    container_name: wm-redis
    image: redis:7.2.4
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    ports:
      - "6379:6379"

networks:
  default:
    driver: bridge

volumes:
  db:
    driver: local
  deno:
    driver: local
  denokv:
    driver: local
  node_modules:
    driver: local
