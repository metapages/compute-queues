# Always use locally installed tools (always pin versions)

set shell := ["bash", "-c"]
set dotenv-load := true
set export := true

APP_PORT := env_var_or_default("APP_PORT", "443")
API_URL := "https://worker-metaframe.localhost:" + APP_PORT

# minimal formatting, bold is very useful

bold := '\033[1m'
normal := '\033[0m'

@_help:
    just --list --unsorted --list-heading $'Worker Commands:\n'
    echo -e ""
    echo -e "        Example command to start a worker using a published docker image:"
    echo -e ""
    echo -e "            docker run --restart unless-stopped -tid \\"
    echo -e "                -v /var/run/docker.sock:/var/run/docker.sock \\"
    echo -e "                -v /tmp:/tmp metapage/metaframe-docker-worker:$(cat mod.json | jq -r '.version') run --cpus=4 public1"
    echo -e ""
    echo -e "        Example commands to start a worker using local development code:"
    echo -e ""
    echo -e "            directly using deno:"
    echo -e ""
    echo -e "                just run --cpus=1 --api-address=https://worker-metaframe.localhost local1"
    echo -e ""
    echo -e "            using the docker image (build and run):"
    echo -e ""
    echo -e "                just docker-image-run cache && \\"
    echo -e "                    run --cpus=1 --api-address=https://worker-metaframe.localhost local1"
    echo -e ""

# Run the worker locally, pointing to the local API
@dev queue="local1":
    deno run --unsafely-ignore-certificate-errors --watch --allow-all --unstable-kv  --unstable-cron src/cli.ts run --cpus=1 --api-address=https://worker-metaframe.localhost:{{ APP_PORT }} {{ queue }}

# Run the worker in local mode. Add --debug to enable debug mode.
local +args="":
    deno run --watch --allow-all --unstable-kv --unstable-cron src/cli.ts run --mode=local --cpus=2 --gpus=0 {{ args }}

# Run the worker locally, pointing to production API
@prod queue="local1":
    deno run --watch --allow-all --unstable-kv  --unstable-cron src/cli.ts run --cpus=1 --api-address=https://container.mtfm.io {{ queue }}

# Quick type check
@check:
    deno check src/cli.ts
    echo "âœ… worker typescript compilation"

# Lint
@lint:
    deno lint

# Lint and fix issues
@lint-fix:
    deno lint --fix

# Format
@fmt:
    deno fmt

# Format check
@fmt-check:
    deno fmt --check

# Fix
@fix: lint-fix fmt

# Run CI
@ci: fmt-check lint

@test +args="":
    deno test --allow-net --allow-read --allow-env --allow-write --allow-run --unstable-cron {{ args }}
    echo "âœ… worker unit tests"

@watch +args="":
    deno test --trace-leaks --watch --allow-net --allow-read --allow-write --allow-env --allow-run --unstable-cron {{ args }}

# Build docker image
publish-docker-images version="":
    #!/usr/bin/env bash
    set -euo pipefail
    echo "$DOCKER_TOKEN" | docker login --username metapage --password-stdin

    export VERSION={{ version }}
    if [ "$VERSION" = "" ]; then
        export VERSION=$(cat mod.json | jq -r '.version')
    fi
    cd ../../

    echo -e "ðŸ‘€ If this fails with a buildx or similar problem, try:"
    echo -e "    docker buildx create --name multiarch --driver docker-container --use"
    echo -e "    docker buildx inspect --bootstrap"

    docker buildx build --push \
        --file app/worker/Dockerfile \
        --target worker \
        --build-arg VERSION=${VERSION:-cache} \
        --platform linux/amd64,linux/arm64 \
        --tag metapage/metaframe-docker-worker:$VERSION .
    echo "âœ… metapage/metaframe-docker-worker:$VERSION"
    docker buildx build --push \
        --file app/worker/Dockerfile \
        --target worker-standalone \
        --build-arg DOCKER_TAG=${DOCKER_TAG:-cache} \
        --platform linux/amd64,linux/arm64 \
        --tag metapage/metaframe-docker-worker:$VERSION-standalone .
    echo "âœ… metapage/metaframe-docker-worker:$VERSION-standalone"

# Build deno binary
build-binary:
    deno compile --unstable --allow-all --output=dist/metapage-worker src/cli.ts
    echo "âœ… worker binary built"

# Publish binary as a github release
publish-binary version="": build-binary
    #!/usr/bin/env bash
    set -euo pipefail
    export VERSION={{ version }}
    if [ "$VERSION" = "" ]; then
        export VERSION=$(cat mod.json | jq -r '.version')
    fi
    gh release create $VERSION dist/metapage-worker
    echo "âœ… worker binary published to github"

# This is different to publish-docker-image because buildx does not
# put images in the local docker cache

# Build docker image for local testing
docker-image-build-for-local version="":
    #!/usr/bin/env bash
    set -euo pipefail

    export VERSION={{ version }}
    if [ "$VERSION" = "" ]; then
        export VERSION=$(cat mod.json | jq -r '.version')
    fi
    cd ../../
    arch=$(docker version --format '{{{{.Server.Arch}}')
    docker buildx build \
        --file app/worker/Dockerfile \
        --target worker \
        --build-arg VERSION=${VERSION:-cache} \
        --platform linux/${arch} \
        --output type=docker \
        --tag metapage/metaframe-docker-worker:$VERSION \
        .
    echo "âœ… metapage/metaframe-docker-worker:$VERSION"

# Build and run a worker docker image, in standalone lcoal mode
docker-image-run-local: (docker-image-build-for-local "local")
    docker run --rm --platform=linux/"$(docker version --format '{{{{.Server.Arch}}')" -p 8000:8000 -v $PWD/src:/app/app/worker/src -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/tmp metapage/metaframe-docker-worker:local run --cpus=1 --mode=local --data-directory /tmp/worker-metapage-io

# Build and run a worker docker image, pointing to the local API
docker-image-run-local1 queue="local1": (docker-image-build-for-local "local")
    docker run --platform=linux/"$(docker version --format '{{{{.Server.Arch}}')" --net=host --entrypoint "" --rm -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/tmp metapage/metaframe-docker-worker:local deno run --allow-net --allow-read --allow-env --allow-run --unsafely-ignore-certificate-errors --unstable-kv --unstable-cron src/cli.ts run --cpus=1 --api-address=https://worker-metaframe.localhost {{ queue }}

docker-image-run-prod queue="public1": (docker-image-build-for-local "local")
    docker run --platform=linux/"$(docker version --format '{{{{.Server.Arch}}')" -ti -v $PWD/src:/app/app/worker/src -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/tmp --entrypoint "" metapage/metaframe-docker-worker:local deno run --watch --allow-all --unstable-kv --unstable-cron src/cli.ts run --data-directory /tmp/debug-curl --max-job-duration=2h --cpus=2 --gpus=0 --api-address=https://container.mtfm.io {{ queue }}
