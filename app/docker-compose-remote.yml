services:

  api1:
    depends_on:
      traefik:
        condition: service_started
      minio:
        condition: service_healthy
      denokv:
        condition: service_started
      redis:
        condition: service_healthy
    image: denoland/deno:alpine-2.1.4
    command: deno run --unsafely-ignore-certificate-errors --watch --allow-all --unstable-broadcast-channel --unstable-kv src/server.ts
    working_dir: /app/api
    healthcheck:
      test: sh -c 'PORT=8081 deno run --allow-net --allow-env src/util/healthcheck.ts'
      interval: 5s
      timeout: 5s
      retries: 10
    expose:
      - "8081"
    ports:
      - "8081:8081"
    environment:
      - NPM_CONFIG_REGISTRY=${NPM_CONFIG_REGISTRY:-}
      - PORT=8081
      - DENO_DIR=/deno
      - DENO_INSTALL_ROOT=/deno
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-minioaccesskey123123}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-minioaccesskey123123}
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - AWS_ENDPOINT=${AWS_ENDPOINT:-https://minio.worker-metaframe.localhost}:${APP_PORT:-443}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-localbucket}
      - DENO_KV_ACCESS_TOKEN=localdenoaccesstoken
      - DENO_KV_URL=http://denokv:4512
      - REDIS_URL=redis://redis:6379
    volumes:
      - deno:/deno
      - ./shared:/app/shared
      - ./browser/dist:/app/browser/dist
      - ./api:/app/api
    networks:
      - default
    extra_hosts:
      - host.docker.internal:host-gateway
      - minio.worker-metaframe.localhost:host-gateway
      - worker-metaframe.localhost:host-gateway
    labels:
      - "traefik.enable=true"
      - "custom.label=worker-metaframe.localhost"
      - "traefik.http.routers.api1.rule=Host(`worker-metaframe.localhost`)"
      - "traefik.http.routers.api1.tls=true"
      - "traefik.http.routers.api1.entrypoints=websecure"
    logging:
      driver: ${LOGGING_API:-json-file}

  api2:
    depends_on:
      api1:
        condition: service_healthy
    image: denoland/deno:alpine-2.1.4
    command: deno run --unsafely-ignore-certificate-errors --watch --allow-all --unstable-broadcast-channel --unstable-kv src/server.ts
    working_dir: /app/api
    healthcheck:
      test: sh -c 'PORT=8082 deno run --allow-net --allow-env src/util/healthcheck.ts'
      interval: 5s
      timeout: 5s
      retries: 10
    expose:
      - "8082"
    environment:
      - NPM_CONFIG_REGISTRY=${NPM_CONFIG_REGISTRY:-}
      - PORT=8082
      - DENO_DIR=/deno
      - DENO_INSTALL_ROOT=/deno
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-minioaccesskey123123}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-minioaccesskey123123}
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - AWS_ENDPOINT=${AWS_ENDPOINT:-https://minio.worker-metaframe.localhost}:${APP_PORT:-443}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-localbucket}
      - DENO_KV_ACCESS_TOKEN=localdenoaccesstoken
      - DENO_KV_URL=http://denokv:4512
      - REDIS_URL=redis://redis:6379
    volumes:
      - deno:/deno
      - ./shared:/app/shared
      - ./browser/dist:/app/browser/dist
      - ./api:/app/api
    networks:
      - default
    extra_hosts:
      - host.docker.internal:host-gateway
      - minio.worker-metaframe.localhost:host-gateway
      - worker-metaframe.localhost:host-gateway
    labels:
      - "traefik.enable=true"
      - "custom.label=worker-metaframe.localhost"
      - "traefik.http.routers.api2.rule=Host(`worker-metaframe-api2.dev`)"
      - "traefik.http.routers.api2.tls=true"
      - "traefik.http.routers.api2.entrypoints=websecure"
    logging:
      driver: ${LOGGING_API:-json-file}

  worker:
    depends_on:
      api2:
        condition: service_healthy
    entrypoint: [
      "deno",
      "run",
      "--unsafely-ignore-certificate-errors",
      "--watch",
      "--allow-all",
      "src/cli.ts",
    ]
    # Notice that the worker connects to api2 while the browser connects to api1
    # This helps check api worker communication
    command: run --cpus=2 --gpus=0 --api-server-address=https://worker-metaframe-api2.dev:${APP_PORT:-443} local1
    build:
      context: .
      dockerfile: worker/Dockerfile
      target: worker
    environment:
      # APP_PORT is only needed for the upload/curl/dns/docker fiasco
      - APP_PORT=${APP_PORT:-443}
      - IGNORE_CERTIFICATE_ERRORS=true
      - NPM_CONFIG_REGISTRY=${NPM_CONFIG_REGISTRY:-}
      - DENO_DIR=/deno
      - DENO_INSTALL_ROOT=/deno
    volumes:
      - ./shared:/app/shared
      - ./worker:/app/worker
      - /tmp:/tmp
      - /var/run/docker.sock:/var/run/docker.sock
      - deno:/deno
      - node_modules_worker:/app/worker/node_modules
    extra_hosts:
      - host.docker.internal:host-gateway
      - minio.worker-metaframe.localhost:host-gateway
      - worker-metaframe.localhost:host-gateway
      - worker-metaframe-api2.dev:host-gateway
    networks:
      - default
    logging:
      driver: ${LOGGING_WORKER:-json-file}

  create-browser-assets:
    build:
      context: .
      dockerfile: browser/Dockerfile
    command: just watch
    working_dir: /app/browser
    environment:
      - NPM_CONFIG_REGISTRY=${NPM_CONFIG_REGISTRY:-}
      - SERVER_ORIGIN=https://worker-metaframe.localhost:${APP_PORT:-443}
    volumes:
      - ../.git:/.git
      - ./browser/dist:/app/browser/dist
      - ./browser/index.html:/app/browser/index.html
      - ./browser/justfile:/app/browser/justfile
      - ./browser/package-lock.json:/app/browser/package-lock.json
      - ./browser/package.json:/app/browser/package.json
      - ./browser/public:/app/browser/public
      - ./browser/src:/app/browser/src
      - ./browser/tsconfig.json:/app/browser/tsconfig.json
      - ./browser/vite.config.ts:/app/browser/vite.config.ts
      - ./shared:/app/shared
      - node_modules:/app/browser/node_modules
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # ensure the s3 bucket exists in this stack
  create-s3-bucket:
    depends_on:
      minio:
        condition: service_healthy
    image: denoland/deno:alpine-2.1.4
    command: deno run --watch --allow-all ./src/s3/create-bucket-development.ts
    working_dir: /app/api
    environment:
      - NPM_CONFIG_REGISTRY=${NPM_CONFIG_REGISTRY:-}
      - AWS_ACCESS_KEY_ID=minioaccesskey123123
      - AWS_SECRET_ACCESS_KEY=minioaccesskey123123
      - AWS_ENDPOINT=https://minio.worker-metaframe.localhost:${APP_PORT:-443}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-localbucket}
      - DENO_DIR=/deno
      - DENO_INSTALL_ROOT=/deno
      - AWS_REGION=${AWS_REGION:-us-west-2}
    extra_hosts:
      - host.docker.internal:host-gateway
      - minio.worker-metaframe.localhost:host-gateway
    volumes:
      - ./api/src:/app/api/src
      - deno:/deno
    networks:
      - default

  # deno.kv in the cloud is a shared db, in docker-compose we need to
  # run it as a service to replicate the behavior
  denokv:
    image: ghcr.io/denoland/denokv
    command: --sqlite-path /data/denokv.sqlite serve --access-token localdenoaccesstoken
    volumes:
      - denokv:/data

volumes:
  denokv:
    driver: local
