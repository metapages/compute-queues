import { assert, assertEquals } from "std/assert";

import { closed, open } from "@korkje/wsi";
import { createNewContainerJobMessage, type DockerJobState } from "@metapages/compute-queues-shared";

import { killAllJobs } from "./util.ts";
import { createWebhookServer } from "./webhooks_test.ts";

const QUEUE_ID = Deno.env.get("QUEUE_ID") || "local1";
const API_URL = Deno.env.get("API_URL") ||
  (QUEUE_ID === "local" ? "http://worker:8000" : "http://api1:8081");

Deno.test(
  "Create a job, and on the submission callback, copy it to another queue via the API",
  async () => {
    if (QUEUE_ID === "local") {
      return;
    }
    await killAllJobs(QUEUE_ID);

    // Create a server to receive the webhook
    // then have a job that calls it on submission

    const port = Math.floor(Math.random() * (65535 - 1024) + 1024);

    const webhookPayload = {
      we: "are good",
    };

    const namespace = `namespace${Math.floor(Math.random() * 1000000)}`;

    const { message, jobId } = await createNewContainerJobMessage({
      definition: {
        image: "alpine:3.18.5",
        command: `echo ${Math.floor(Math.random() * 1000000)}`,
      },
      control: {
        namespace,
        callbacks: {
          queued: {
            url: `http://test:${port}/test`,
            payload: webhookPayload,
          },
        },
      },
    });

    const queueTarget = `localtest${Math.floor(Math.random() * 1000000)}`;

    // Create a promise that will resolve when the webhook is called
    const { promise: webhookCalled, resolve: webhookResolve } = Promise
      .withResolvers<void>();

    const { shutdown } = createWebhookServer({
      path: "/test",
      port,
      handler: async (req) => {
        try {
          // Resolve the promise when we get the expected payload
          const body: {
            // jobId: string;
            queue: string;
            namespace?: string;
            config?: unknown;
          } = await req.json();
          assertEquals(body.config, webhookPayload);
          // assertEquals(body.jobId, jobId);
          // assertEquals(body.namespace, namespace);
          assertEquals(body.queue, QUEUE_ID);

          // Make sure to await and consume the response
          const response = await fetch(`${API_URL}/j/${jobId}/copy`, {
            method: "POST",
            body: JSON.stringify({
              // jobId,
              queue: queueTarget,
              namespace,
              config: webhookPayload,
            }),
            headers: {
              "Content-Type": "application/json",
            },
          });

          assertEquals(response.status, 200);
          const bodyFromCopyCall: { success: boolean } = await response.json();
          assertEquals(bodyFromCopyCall.success, true);

          // Make sure to await and consume the response
          const responseStatus = await fetch(
            `${API_URL}/q/${queueTarget}/status`,
          );
          const jobStatus: {
            jobs: { [jobId: string]: { state: DockerJobState } };
          } = await responseStatus.json();
          assert(!!jobStatus?.jobs?.[jobId]);

          webhookResolve();
          return new Response("OK");
        } catch (error) {
          console.error("Error in webhook handler:", error);
          webhookResolve();
          return new Response("Error", { status: 500 });
        }
      },
      timeout: 12000,
    });

    try {
      // Open the socket
      const socket = new WebSocket(
        `${API_URL.replace("http", "ws")}/q/${QUEUE_ID}/client`,
      );
      await open(socket);

      // Send the job creation message
      socket.send(JSON.stringify(message));

      // Wait for webhook to be called
      await webhookCalled;

      // Clean up resources
      socket.close();
      await closed(socket);
    } finally {
      // Ensure webhook server is always shut down
      await shutdown();
    }
  },
);
