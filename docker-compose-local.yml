services:
  worker:
    depends_on:
      traefik:
        condition: service_started
      minio:
        condition: service_healthy
      denokv:
        condition: service_started
      redis:
        condition: service_healthy
    entrypoint: [
      "deno",
      "run",
      "--unsafely-ignore-certificate-errors",
      "--watch",
      "--allow-all",
      "--unstable-kv",
      "--unstable-broadcast-channel",
      "src/cli.ts",
    ]
    command: run --mode=local --cpus=2 --gpus=0 local
    working_dir: /app/app/worker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    expose:
      - "8000"
    ports:
      - "8000:8000"
    build:
      context: .
      dockerfile: app/worker/Dockerfile
      target: worker
    environment:
      - PORT=8000
      - IGNORE_CERTIFICATE_ERRORS=true
      - NPM_CONFIG_REGISTRY=${NPM_CONFIG_REGISTRY:-}
      - DENO_DIR=/deno
      - DENO_INSTALL_ROOT=/deno
      - REDIS_URL=redis://redis:6379
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-minioaccesskey123123}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-minioaccesskey123123}
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - AWS_ENDPOINT=${AWS_ENDPOINT:-https://minio.worker-metaframe.localhost}:${APP_PORT:-443}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-localbucket}
      - DENO_KV_ACCESS_TOKEN=localdenoaccesstoken
      - DENO_KV_URL=http://denokv:4512
    volumes:
      - ./deno.json:/app/deno.json
      - ./app/shared:/app/app/shared
      - ./app/worker:/app/app/worker
      - ./app/browser/dist:/app/app/browser/dist
      - /tmp:/tmp
      - /var/run/docker.sock:/var/run/docker.sock
      - deno:/deno
      - node_modules:/app/node_modules
      - ./data:/app/data
    networks:
      - default
    extra_hosts:
      - worker:host-gateway
      - host.docker.internal:host-gateway
      - minio.worker-metaframe.localhost:host-gateway
      - worker-metaframe.localhost:host-gateway
    labels:
      - "custom.label=worker-metaframe.localhost"
      - "traefik.enable=true"
      - "traefik.http.routers.worker.rule=Host(`worker-metaframe.localhost`)"
      - "traefik.http.routers.worker.tls=true"
      - "traefik.http.routers.worker.entrypoints=websecure"
      - "traefik.http.services.worker.loadbalancer.server.port=8000"
      - "traefik.http.services.worker.loadbalancer.server.scheme=http"
    logging:
      driver: ${LOGGING_WORKER:-json-file}

  create-browser-assets:
    build:
      context: .
      dockerfile: app/browser/Dockerfile
    command: just watch
    working_dir: /app/app/browser
    environment:
      - NPM_CONFIG_REGISTRY=${NPM_CONFIG_REGISTRY:-}
      - SERVER_ORIGIN=https://worker-metaframe.localhost:${APP_PORT:-443}
    volumes:
      - deno:/deno
      - .:/app
      - browser_node_modules:/app/app/browser/node_modules
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # deno.kv in the cloud is a shared db, in docker-compose we need to
  # run it as a service to replicate the behavior
  denokv:
    image: ghcr.io/denoland/denokv
    command: --sqlite-path /data/denokv.sqlite serve --access-token localdenoaccesstoken
    volumes:
      - denokv:/data

volumes:
  denokv:
    driver: local
